[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "openscad-mcp"
version = "0.1.0"
description = "A Model Context Protocol (MCP) server for OpenSCAD 3D modeling and rendering"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Coop" }
]
maintainers = [
    
]
keywords = [
    "mcp",
    "openscad",
    "3d-modeling",
    "rendering",
    "cad",
    "model-context-protocol",
    "ai-tools"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
    "Topic :: Scientific/Engineering :: Visualization",
]
requires-python = ">=3.10"
dependencies = [
    "fastmcp>=2.11.3",
    "pydantic>=2.11.7",
    "Pillow>=10.0.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/openscad-mcp-server"
Documentation = "https://github.com/yourusername/openscad-mcp-server#readme"
Repository = "https://github.com/yourusername/openscad-mcp-server.git"
Issues = "https://github.com/yourusername/openscad-mcp-server/issues"
Changelog = "https://github.com/yourusername/openscad-mcp-server/blob/main/CHANGELOG.md"

[project.scripts]
openscad-mcp = "openscad_mcp.server:main"

[tool.hatch.build.targets.sdist]
include = [
    "src/**/*.py",
    "src/**/*.yaml",
    "src/**/*.yml",
    "src/**/*.json",
    "README.md",
    "LICENSE",
    "pyproject.toml",
]
exclude = [
    "tests/",
    "docs/",
    ".github/",
    "*.pyc",
    "__pycache__/",
    ".pytest_cache/",
    ".coverage",
    ".env",
    ".venv/",
    "test-env/",
    "venv/",
    "dist/",
    "build/",
    "*.egg-info/",
]

[tool.hatch.build.targets.wheel]
packages = ["src/openscad_mcp"]

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip() without an explicit strict= parameter
]

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG"]

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = [
    "--cov=openscad_mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-v",
]

[tool.coverage.run]
source = ["src/openscad_mcp"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]